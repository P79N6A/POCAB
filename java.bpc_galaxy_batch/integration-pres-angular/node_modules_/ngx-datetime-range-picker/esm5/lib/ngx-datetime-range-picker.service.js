import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { NgxDatetimeRangePickerConstants } from "./ngx-datetime-range-picker.constants";
import * as i0 from "@angular/core";
var moment = require("moment");
var _ = require("lodash");
var DEFAULT_TYPE = NgxDatetimeRangePickerConstants.DEFAULT.TYPE;
var DEFAULT_INPUT_CLASS = NgxDatetimeRangePickerConstants.DEFAULT.INPUT_CLASS;
var DEFAULT_DATE_FROMAT = NgxDatetimeRangePickerConstants.DEFAULT.DATE_FROMAT;
var DEFAULT_TIME_FORMAT = NgxDatetimeRangePickerConstants.DEFAULT.TIME_FORMAT;
var DEFAULT_START_DATE = NgxDatetimeRangePickerConstants.DEFAULT.START_DATE;
var DEFAULT_END_DATE = NgxDatetimeRangePickerConstants.DEFAULT.END_DATE;
var DEFAULT_MIN_DATE = NgxDatetimeRangePickerConstants.DEFAULT.MIN_DATE;
var DEFAULT_MAX_DATE = NgxDatetimeRangePickerConstants.DEFAULT.MAX_DATE;
var DEFAULT_START_TIME = NgxDatetimeRangePickerConstants.DEFAULT.START_TIME;
var DEFAULT_END_TIME = NgxDatetimeRangePickerConstants.DEFAULT.END_TIME;
var DEFAULT_MODEL_KEYS = NgxDatetimeRangePickerConstants.DEFAULT.MODEL_KEYS;
var MONTHS_AVAILABLE = NgxDatetimeRangePickerConstants.CONSTANT.MONTHS_AVAILABLE;
var DEFAULT_TIMEZONE_CODE = NgxDatetimeRangePickerConstants.DEFAULT.TZ_CODE;
var EU_TZ_CODE = NgxDatetimeRangePickerConstants.CONSTANT.EU_TZ_CODE;
var TZ_NAMES = NgxDatetimeRangePickerConstants.CONSTANT.TZ_NAMES;
var NgxDatetimeRangePickerService = /** @class */ (function () {
    function NgxDatetimeRangePickerService() {
    }
    NgxDatetimeRangePickerService.prototype.getNotAvailableText = function () {
        return "N/A";
    };
    NgxDatetimeRangePickerService.prototype.getDefaultAriaLabelOptions = function () {
        return {
            inputField: "Date Range Input Field"
        };
    };
    NgxDatetimeRangePickerService.prototype.getDefaultOptions = function () {
        return {
            dateArray: [],
            startDate: DEFAULT_START_DATE,
            endDate: DEFAULT_END_DATE,
            minDate: DEFAULT_MIN_DATE,
            maxDate: DEFAULT_MAX_DATE,
            startTime: DEFAULT_START_TIME,
            endTime: DEFAULT_END_TIME
        };
    };
    NgxDatetimeRangePickerService.prototype.getDefaultSettings = function () {
        return {
            type: DEFAULT_TYPE,
            modelKeys: DEFAULT_MODEL_KEYS,
            selectedModel: undefined,
            showTimezoneSelect: false,
            useLocalTimezone: false,
            timePicker: false,
            inputClass: DEFAULT_INPUT_CLASS,
            inputDateFormat: null,
            viewDateFormat: DEFAULT_DATE_FROMAT,
            outputDateFormat: DEFAULT_DATE_FROMAT,
            singleDatePicker: false,
            componentDisabled: false,
            placeholder: "Select Date",
            showRowNumber: true,
            availableRanges: {},
            showRanges: true,
            disableWeekends: false,
            disableWeekdays: false,
            retailCalendar: false,
            displayBeginDate: false,
            displayEndDate: false,
            ariaLabels: this.getDefaultAriaLabelOptions()
        };
    };
    NgxDatetimeRangePickerService.prototype.formatDateToDefaultFormat = function (date, format) {
        if (format === void 0) { format = DEFAULT_DATE_FROMAT; }
        var fromattedDate = null;
        if (date) {
            if (!isNaN(Number(date))) {
                fromattedDate = moment(date).format(DEFAULT_DATE_FROMAT);
            }
            else {
                if (!format) {
                    format = moment(date)._f;
                }
                else {
                    if (format !== moment(date)._f) {
                        console.warn("ERR_NGX_DATETIME_RANGE_PICKER: inputDateFormat !== dateFormat");
                    }
                }
                if (!format) {
                    console.warn("ERR_NGX_DATETIME_RANGE_PICKER: The provided date is in unknown format. Pass the format or pass the date in known format");
                }
                fromattedDate = moment(date, format).format(DEFAULT_DATE_FROMAT);
            }
        }
        return fromattedDate;
    };
    NgxDatetimeRangePickerService.prototype.formatTimeToDefaultFormat = function (time) {
        var formattedTime = null;
        if (time) {
            if (time.indexOf(":") > -1) {
                if (time.indexOf("AM") > -1 || time.indexOf("PM") > -1) {
                    formattedTime = moment(time, "h:mm A").format(DEFAULT_TIME_FORMAT);
                }
                else {
                    formattedTime = time;
                }
            }
            else {
                console.warn("ERR_NGX_DATETIME_RANGE_PICKER: The provided time is not in correct format. Format: HH:mm or hh:mm A");
            }
        }
        return formattedTime;
    };
    NgxDatetimeRangePickerService.prototype.getFrequencyColumnHeader = function (type) {
        return (function () {
            switch (type) {
                case "daily":
                    return "W#";
                case "weekly":
                    return "";
                case "monthly":
                    return "Q#";
                case "quarterly":
                    return "Year";
                case "yearly":
                    return "";
            }
        })();
    };
    NgxDatetimeRangePickerService.prototype.getCalendarRowNumberText = function (type, number) {
        return (function () {
            switch (type) {
                case "daily":
                    return "W" + number;
                case "weekly":
                    return "";
                case "monthly":
                    return "Q" + number;
                case "quarterly":
                    return "" + number;
                case "yearly":
                    return "";
            }
        })();
    };
    NgxDatetimeRangePickerService.prototype.createDefaultRanges = function (config) {
        var ranges = {};
        var type = config.type;
        var maxDate = _.cloneDeep(config.maxDate);
        var formattedMaxDate = this.formatDateToDefaultFormat(maxDate, DEFAULT_DATE_FROMAT);
        if (type === "daily") {
            ranges["Last 7 Days"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(6, "days")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
            ranges["Last 30 Days"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(29, "days")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
            ranges["Last 90 Days"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(89, "days")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
        }
        else if (type === "weekly") {
            ranges["Last 4 Weeks"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(3, "weeks")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
            ranges["Last 13 Weeks"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(12, "weeks")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
            ranges["Last 26 Weeks"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(25, "weeks")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
        }
        else if (type === "monthly") {
            // if(retailCalendar) ? subtract(3, 'months')....so on for 'Last 3 Months'....so on
            ranges["Last 3 Months"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(2, "months")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
            ranges["Last 6 Months"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(5, "months")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
            ranges["Last 9 Months"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(8, "months")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
        }
        else if (type === "quarterly") {
            // if(retailCalendar) ? subtract(1, 'quarters')....so on for 'Last 2 Quarters'....so on
            ranges["Last 2 Quarters"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(1, "quarters")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
            ranges["Last 4 Quarters"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(3, "quarters")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
        }
        else if (type === "yearly") {
            ranges["Last Year"] = {
                startDate: moment(formattedMaxDate, DEFAULT_DATE_FROMAT)
                    .subtract(1, "year")
                    .format(DEFAULT_DATE_FROMAT),
                endDate: formattedMaxDate
            };
        }
        ranges["Custom Range"] = { startDate: null, endDate: null };
        return ranges;
    };
    NgxDatetimeRangePickerService.prototype.getSanitizedDateArray = function (config) {
        var sanitizedDateArray = [];
        var type = config.type;
        var dateArray = config.dateArray;
        var inputDateFormat = config.inputDateFormat;
        // dateArray can have nulls
        _.forEach(dateArray, function (date) {
            if (date) {
                var format = null;
                if (isNaN(Number(date))) {
                    if (inputDateFormat) {
                        format = inputDateFormat;
                    }
                    else {
                        format = moment(date)._f;
                    }
                }
                if (inputDateFormat !== moment(date)._f) {
                    console.warn("ERR_NGX_DATETIME_RANGE_PICKER: inputDateFormat !== dateFormat in dateArray. Converted dates might not be as expected");
                }
                var value = format ? moment(date, format).format(format) : moment(date).valueOf();
                if (type === "weekly") {
                    value = format
                        ? moment(date, format)
                            .endOf("week")
                            .format(format)
                        : moment(date)
                            .endOf("week")
                            .valueOf();
                }
                else if (type === "monthly") {
                    value = format
                        ? moment(date, format)
                            .endOf("month")
                            .format(format)
                        : moment(date)
                            .endOf("month")
                            .valueOf();
                }
                else if (type === "quarterly") {
                    value = format
                        ? moment(date, format)
                            .endOf("quarter")
                            .format(format)
                        : moment(date)
                            .endOf("quarter")
                            .valueOf();
                }
                else if (type === "yearly") {
                    value = format
                        ? moment(date, format)
                            .endOf("year")
                            .format(format)
                        : moment(date)
                            .endOf("year")
                            .valueOf();
                }
                if (value) {
                    sanitizedDateArray.push(value);
                }
                else {
                    console.warn("ERR_NGX_DATETIME_RANGE_PICKER: dateArray values are in unknown format. Pass the format or pass the dates in known format");
                }
            }
        });
        return _.uniqBy(sanitizedDateArray);
    };
    NgxDatetimeRangePickerService.prototype.getNumberOfWeeks = function (date) {
        var numberOfWeeks = null;
        if (date) {
            var monthStart = moment(date, DEFAULT_DATE_FROMAT)
                .startOf("month")
                .day();
            var monthEnd = Number(moment(date, DEFAULT_DATE_FROMAT)
                .endOf("month")
                .format("D"));
            numberOfWeeks = Math.ceil((monthStart + monthEnd) / 7);
        }
        return numberOfWeeks;
    };
    NgxDatetimeRangePickerService.prototype.getYearlyWeekCount = function (year, retailCalendar) {
        var weekCount = null;
        if (year) {
            var yearStartDate = moment(year, "YYYY")
                .startOf("year")
                .format(DEFAULT_DATE_FROMAT);
            var yearEndDate = moment(year, "YYYY")
                .endOf("year")
                .format(DEFAULT_DATE_FROMAT);
            var yearEndWeekEndDate = moment(yearEndDate, DEFAULT_DATE_FROMAT)
                .startOf("week")
                .format(DEFAULT_DATE_FROMAT);
            var yearStartWeekEndDate = moment(yearStartDate, DEFAULT_DATE_FROMAT)
                .endOf("week")
                .format(DEFAULT_DATE_FROMAT);
            var yearSartWeekNumber = this.getWeekNumber(yearStartWeekEndDate);
            var yearEndWeekNumber = this.getWeekNumber(yearEndWeekEndDate);
            weekCount = yearEndWeekNumber - yearSartWeekNumber + 1;
        }
        return weekCount;
    };
    NgxDatetimeRangePickerService.prototype.getMonthsAvailable = function (minDate, maxDate, selectedYear) {
        var months = [];
        if (minDate && maxDate && selectedYear) {
            var minDatems = moment(minDate, DEFAULT_DATE_FROMAT).valueOf();
            var maxDatems = moment(maxDate, DEFAULT_DATE_FROMAT).valueOf();
            var yearStartms = moment()
                .year(selectedYear)
                .startOf("year")
                .valueOf();
            var yearEndms = moment()
                .year(selectedYear)
                .endOf("year")
                .valueOf();
            if (minDatems < yearStartms) {
                minDatems = yearStartms;
            }
            if (maxDatems > yearEndms) {
                maxDatems = yearEndms;
            }
            var minDateMonthNumber = moment(minDatems).month();
            var diff = moment(maxDatems).diff(moment(minDatems), "months");
            var maxMonths = diff < MONTHS_AVAILABLE.length ? diff : MONTHS_AVAILABLE.length;
            for (var i = 0; i <= maxMonths; i++) {
                if (minDateMonthNumber >= MONTHS_AVAILABLE.length) {
                    months.push(MONTHS_AVAILABLE[minDateMonthNumber - MONTHS_AVAILABLE.length]);
                }
                else {
                    months.push(MONTHS_AVAILABLE[minDateMonthNumber]);
                }
                minDateMonthNumber++;
            }
        }
        return months;
    };
    NgxDatetimeRangePickerService.prototype.getYearsAvailable = function (config) {
        var minDate = config ? config.minDate : "";
        var maxDate = config ? config.maxDate : "";
        var years = [];
        if (minDate && maxDate) {
            var minYear = Number(this.getSelectedYear(config, minDate, "left"));
            var maxYear = Number(this.getSelectedYear(config, maxDate, "right"));
            var diff = maxYear - minYear;
            for (var i = 0; i <= diff; i++) {
                years.push("" + (minYear + i));
            }
        }
        return years.reverse();
    };
    NgxDatetimeRangePickerService.prototype.isDateAvailable = function (date, minDate, maxDate, startDate, endDate, monthStartDate, monthEndDate, config) {
        var available = false;
        var type = config.type;
        var dateArray = config.dateArray ? config.dateArray : [];
        var inputDateFormat = config.inputDateFormat;
        var disableWeekends = config.disableWeekends;
        var disableWeekdays = config.disableWeekdays;
        if (type === "daily") {
            minDate = minDate > monthStartDate ? minDate : monthStartDate;
            maxDate = maxDate < monthEndDate ? maxDate : monthEndDate;
        }
        // if(date === minDate
        //     || date === maxDate) {
        //   available = true;
        // }
        if (date >= minDate && date <= maxDate) {
            if (dateArray.length > 0) {
                available = _.some(dateArray, function (d) {
                    var format = null;
                    if (isNaN(Number(date))) {
                        if (inputDateFormat) {
                            format = inputDateFormat;
                        }
                        else {
                            format = moment(date)._f;
                        }
                    }
                    return moment(d, format).valueOf() === date;
                });
            }
            else {
                available = true;
            }
            if (available) {
                if (disableWeekends) {
                    available = !this.isWeekend(date);
                }
                if (disableWeekdays) {
                    available = !this.isWeekday(date);
                }
            }
        }
        return available;
    };
    NgxDatetimeRangePickerService.prototype.isDateInRange = function (date, minDate, maxDate, startDate, endDate, monthStartDate, monthEndDate, available, config) {
        var inRange = false;
        var type = config.type;
        var singleDatePicker = config.singleDatePicker;
        if (!singleDatePicker) {
            if (type === "daily") {
                minDate = monthStartDate;
                maxDate = monthEndDate;
            }
            if (date >= startDate && date <= endDate && date >= minDate && date <= maxDate) {
                if (available) {
                    inRange = true;
                }
            }
        }
        return inRange;
    };
    NgxDatetimeRangePickerService.prototype.isDateActive = function (date, startDate, endDate, side) {
        var active = false;
        if ((date === startDate && side === "left") || (date === endDate && side === "right")) {
            active = true;
        }
        return active;
    };
    NgxDatetimeRangePickerService.prototype.isDateToday = function (date, config) {
        var today = false;
        var todayDate = moment()
            .startOf("day")
            .valueOf();
        var type = config.type;
        var firstLastDay = this.getFirstLastDay(moment(todayDate).format(DEFAULT_DATE_FROMAT), type);
        var firstDay = moment(firstLastDay.firstDay, DEFAULT_DATE_FROMAT).valueOf();
        var lastDay = moment(firstLastDay.lastDay, DEFAULT_DATE_FROMAT).valueOf();
        if (date >= firstDay && date <= lastDay) {
            today = true;
        }
        return today;
    };
    NgxDatetimeRangePickerService.prototype.isWeekday = function (date, format) {
        return !this.isWeekend(date, format);
    };
    NgxDatetimeRangePickerService.prototype.isWeekend = function (date, format) {
        if (!format) {
            format = null;
        }
        var day = moment(date, format).day();
        return day === 0 || day === 6 ? true : false;
    };
    NgxDatetimeRangePickerService.prototype.getCalendarRowVariables = function (options) {
        var variables = {};
        var type = options.type;
        var monthStartWeekNumber = options.monthStartWeekNumber;
        var dateRows = options.dateRows;
        var year = "" + options.year;
        if (type === "daily") {
            variables.rowNumber = monthStartWeekNumber + dateRows;
            variables.columns = 6;
        }
        else if (type === "weekly") {
            // variables.rowNumber = `${(dateRows*2)+1} - ${(dateRows*2)+2}`;
            variables.rowNumber = "";
            variables.columns = 6;
        }
        else if (type === "monthly") {
            variables.rowNumber = dateRows + 1;
            variables.columns = 2;
        }
        else if (type === "quarterly") {
            variables.rowNumber = year.charAt(dateRows);
            variables.columns = 0;
        }
        else if (type === "yearly") {
            variables.rowNumber = "";
            variables.columns = 0;
        }
        return variables;
    };
    NgxDatetimeRangePickerService.prototype.getCalendarRowItemVariables = function (options) {
        var variables = {
            currentItemDate: "",
            rowItemText: "",
            itemCount: null
        };
        var type = options.type;
        var monthStartWeekNumber = options.monthStartWeekNumber;
        var yearStartDate = options.yearStartDate;
        var year = options.year;
        var rowItem = options.rowItem;
        var dateRows = options.dateRows;
        var columns = options.columns;
        var itemCount = rowItem + dateRows * columns + dateRows;
        var currentItemDate = "";
        var rowItemText = "";
        var firstLastDayObject = {};
        if (type === "daily") {
            if (!_.isNil(monthStartWeekNumber) && !_.isNil(dateRows) && !_.isNil(year)) {
                var yearStartDateDaily = moment()
                    .year(year)
                    .startOf("year")
                    .format(DEFAULT_DATE_FROMAT);
                currentItemDate = moment(yearStartDateDaily, DEFAULT_DATE_FROMAT)
                    .add(monthStartWeekNumber + dateRows - 1, "week")
                    .startOf("week")
                    .add(rowItem, "day")
                    .format(DEFAULT_DATE_FROMAT);
                rowItemText = moment(currentItemDate, DEFAULT_DATE_FROMAT).format("D");
            }
        }
        else if (type === "weekly") {
            if (!_.isNil(yearStartDate) && !_.isNil(itemCount)) {
                currentItemDate = moment(yearStartDate, DEFAULT_DATE_FROMAT)
                    .add(itemCount, "week")
                    .endOf("week")
                    .format(DEFAULT_DATE_FROMAT);
                var weekNumber = itemCount + 1;
                rowItemText = "W" + weekNumber;
            }
        }
        else if (type === "monthly") {
            if (!_.isNil(itemCount) && !_.isNil(year)) {
                currentItemDate = moment()
                    .year(year)
                    .month(itemCount)
                    .endOf("month")
                    .format(DEFAULT_DATE_FROMAT);
                rowItemText = moment(currentItemDate, DEFAULT_DATE_FROMAT).format("MMM");
            }
        }
        else if (type === "quarterly") {
            if (!_.isNil(itemCount) && !_.isNil(year)) {
                currentItemDate = moment()
                    .year(year)
                    .quarter(itemCount + 1)
                    .endOf("quarter")
                    .format(DEFAULT_DATE_FROMAT);
                rowItemText = "Quarter " + (itemCount + 1);
            }
        }
        firstLastDayObject = this.getFirstLastDay(currentItemDate, type);
        variables.itemCount = itemCount;
        variables.currentItemDate = currentItemDate;
        variables.rowItemText = rowItemText;
        variables.firstDay = firstLastDayObject.firstDay;
        variables.lastDay = firstLastDayObject.lastDay;
        return variables;
    };
    NgxDatetimeRangePickerService.prototype.isRowIemValid = function (options) {
        var valid = false;
        var type = options.type;
        var year = options.year;
        var itemCount = options.itemCount;
        var retailCalendar = options.retailCalendar;
        var validWeekCount = this.getYearlyWeekCount(year, retailCalendar);
        if (type === "daily") {
            valid = true;
        }
        else if (type === "weekly") {
            if (itemCount < validWeekCount) {
                valid = true;
            }
        }
        else if (type === "monthly") {
            return true;
        }
        else if (type === "quarterly") {
            return true;
        }
        return valid;
    };
    NgxDatetimeRangePickerService.prototype.formatStartDate = function (config, returnFormat) {
        var startDate = config ? config.startDate : null;
        var type = config ? config.type : "";
        var formattedStartDate = null;
        if (startDate) {
            formattedStartDate = moment(startDate, DEFAULT_DATE_FROMAT).format(returnFormat);
            if (type === "weekly") {
                formattedStartDate = moment(startDate, DEFAULT_DATE_FROMAT)
                    .startOf("week")
                    .format(returnFormat);
            }
            else if (type === "monthly") {
                formattedStartDate = moment(startDate, DEFAULT_DATE_FROMAT)
                    .startOf("month")
                    .format(returnFormat);
            }
            else if (type === "quarterly") {
                formattedStartDate = moment(startDate, DEFAULT_DATE_FROMAT)
                    .startOf("quarter")
                    .format(returnFormat);
            }
            else if (type === "yearly") {
                formattedStartDate = moment(startDate, DEFAULT_DATE_FROMAT)
                    .startOf("year")
                    .format(returnFormat);
            }
        }
        return formattedStartDate;
    };
    NgxDatetimeRangePickerService.prototype.getSelectedYear = function (config, date, side) {
        return moment(date, DEFAULT_DATE_FROMAT).format("YYYY");
    };
    NgxDatetimeRangePickerService.prototype.getFirstLastDay = function (date, type) {
        var firstDay = "";
        var lastDay = "";
        if (type === "daily") {
            firstDay = lastDay = date;
        }
        else if (type === "weekly") {
            firstDay = moment(date, DEFAULT_DATE_FROMAT)
                .startOf("week")
                .format(DEFAULT_DATE_FROMAT);
            lastDay = moment(date, DEFAULT_DATE_FROMAT)
                .endOf("week")
                .format(DEFAULT_DATE_FROMAT);
        }
        else if (type === "monthly") {
            firstDay = moment(date, DEFAULT_DATE_FROMAT)
                .startOf("month")
                .format(DEFAULT_DATE_FROMAT);
            lastDay = moment(date, DEFAULT_DATE_FROMAT)
                .endOf("month")
                .format(DEFAULT_DATE_FROMAT);
        }
        else if (type === "quarterly") {
            firstDay = moment(date, DEFAULT_DATE_FROMAT)
                .startOf("quarter")
                .format(DEFAULT_DATE_FROMAT);
            lastDay = moment(date, DEFAULT_DATE_FROMAT)
                .endOf("quarter")
                .format(DEFAULT_DATE_FROMAT);
        }
        else if (type === "yearly") {
            firstDay = moment(date, DEFAULT_DATE_FROMAT)
                .startOf("year")
                .format(DEFAULT_DATE_FROMAT);
            lastDay = moment(date, DEFAULT_DATE_FROMAT)
                .endOf("year")
                .format(DEFAULT_DATE_FROMAT);
        }
        return {
            firstDay: firstDay,
            lastDay: lastDay
        };
    };
    NgxDatetimeRangePickerService.prototype.getLocalTimezone = function () {
        var tz = /\((.*)\)/.exec(new Date().toString())[1];
        if (tz === "Central Europe Standard Time") {
            tz = EU_TZ_CODE;
        }
        else {
            tz = DEFAULT_TIMEZONE_CODE;
        }
        return tz;
    };
    NgxDatetimeRangePickerService.prototype.getZoneDate = function (tz, format, date) {
        if (date) {
            date = moment(date, format)
                .startOf("day")
                .valueOf();
        }
        else {
            date = moment().valueOf();
        }
        var today = new Date(date).toLocaleString("en-US", {
            timeZone: TZ_NAMES[tz]
        });
        today = moment(today, "MM/DD/YYYY, hh:mm:ss A");
        return today;
    };
    NgxDatetimeRangePickerService.prototype.getZoneToday = function (tz, viewDateFormat) {
        var today = this.getZoneDate(tz, viewDateFormat);
        return moment(today).format(viewDateFormat + "  hh:mm A");
    };
    NgxDatetimeRangePickerService.prototype.formatToZoneDate = function (tz, format, date) {
        var formattedDate = this.getZoneDate(tz, format, date);
        return moment(formattedDate).format("" + format);
    };
    NgxDatetimeRangePickerService.prototype.convertToViewTimeItem = function (item) {
        var stringified_item = item + "";
        if (stringified_item.length === 1) {
            stringified_item = "0" + stringified_item;
        }
        return stringified_item;
    };
    NgxDatetimeRangePickerService.prototype.getWeekNumber = function (date) {
        if (date) {
            var year = moment(date, "YYYY-MM-DD").year();
            var month = moment(date, "YYYY-MM-DD").month();
            var day = Number(moment(date, "YYYY-MM-DD").format("D"));
            var yearStartms = new Date(year, 0, 1);
            var datems = new Date(year, month, day);
            return Math.ceil(((datems.getTime() - yearStartms.getTime()) / 86400000 + yearStartms.getDay() + 1) / 7);
        }
        else {
            console.warn("getWeekNumber: Invalid date");
            return this.getNotAvailableText();
        }
    };
    NgxDatetimeRangePickerService.ngInjectableDef = i0.defineInjectable({ factory: function NgxDatetimeRangePickerService_Factory() { return new NgxDatetimeRangePickerService(); }, token: NgxDatetimeRangePickerService, providedIn: "root" });
    NgxDatetimeRangePickerService = tslib_1.__decorate([
        Injectable({
            providedIn: "root"
        })
    ], NgxDatetimeRangePickerService);
    return NgxDatetimeRangePickerService;
}());
export { NgxDatetimeRangePickerService };
//# sourceMappingURL=data:application/json;base64,