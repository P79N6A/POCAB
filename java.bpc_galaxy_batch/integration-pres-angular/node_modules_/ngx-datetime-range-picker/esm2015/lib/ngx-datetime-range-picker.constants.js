const moment = require("moment");
const USA_MST_TZ_CODE = "MST";
const USA_TZ_CODE = "PST";
const EU_TZ_CODE = "CET";
export const NgxDatetimeRangePickerConstants = {
    DEFAULT: {
        TYPE: "daily",
        INPUT_CLASS: "m1drp",
        DATE_FROMAT: "YYYY-MM-DD",
        TIME_FORMAT: "HH:mm",
        START_DATE: moment().format("YYYY-MM-DD"),
        END_DATE: moment().format("YYYY-MM-DD"),
        MIN_DATE: moment()
            .subtract(2, "year")
            .startOf("year")
            .format("YYYY-MM-DD"),
        MAX_DATE: moment().format("YYYY-MM-DD"),
        START_TIME: "00:00",
        END_TIME: "23:59",
        MODEL_KEYS: ["daily", "weekly", "monthly", "quarterly", "yearly"],
        TZ_CODE: USA_MST_TZ_CODE
    },
    CONSTANT: {
        MONTHS_AVAILABLE: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        USA_MST_TZ_CODE,
        USA_TZ_CODE,
        EU_TZ_CODE,
        TZ_CODES: [USA_TZ_CODE, EU_TZ_CODE],
        OFFSETS: {
            [USA_TZ_CODE]: {
                SO: -7,
                WO: -8
            },
            [EU_TZ_CODE]: {
                SO: 1,
                WO: 0
            }
        },
        TZ_NAMES: {
            [USA_MST_TZ_CODE]: "America/Phoenix",
            [USA_TZ_CODE]: "America/Los_Angeles",
            [EU_TZ_CODE]: "Europe/Berlin"
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRhdGV0aW1lLXJhbmdlLXBpY2tlci5jb25zdGFudHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZGF0ZXRpbWUtcmFuZ2UtcGlja2VyLyIsInNvdXJjZXMiOlsibGliL25neC1kYXRldGltZS1yYW5nZS1waWNrZXIuY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUM7QUFDOUIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQzFCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQztBQUV6QixNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRztJQUM3QyxPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsT0FBTztRQUNiLFdBQVcsRUFBRSxPQUFPO1FBQ3BCLFdBQVcsRUFBRSxZQUFZO1FBQ3pCLFdBQVcsRUFBRSxPQUFPO1FBQ3BCLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3pDLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLFFBQVEsRUFBRSxNQUFNLEVBQUU7YUFDZixRQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQzthQUNuQixPQUFPLENBQUMsTUFBTSxDQUFDO2FBQ2YsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUN2QixRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUN2QyxVQUFVLEVBQUUsT0FBTztRQUNuQixRQUFRLEVBQUUsT0FBTztRQUNqQixVQUFVLEVBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDO1FBQ2pFLE9BQU8sRUFBRSxlQUFlO0tBQ3pCO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztRQUN0RyxlQUFlO1FBQ2YsV0FBVztRQUNYLFVBQVU7UUFDVixRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDO1FBQ25DLE9BQU8sRUFBRTtZQUNQLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ2IsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDTixFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ1A7WUFDRCxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNaLEVBQUUsRUFBRSxDQUFDO2dCQUNMLEVBQUUsRUFBRSxDQUFDO2FBQ047U0FDRjtRQUNELFFBQVEsRUFBRTtZQUNSLENBQUMsZUFBZSxDQUFDLEVBQUUsaUJBQWlCO1lBQ3BDLENBQUMsV0FBVyxDQUFDLEVBQUUscUJBQXFCO1lBQ3BDLENBQUMsVUFBVSxDQUFDLEVBQUUsZUFBZTtTQUM5QjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgdmFyIHJlcXVpcmU6IGFueTtcbmNvbnN0IG1vbWVudCA9IHJlcXVpcmUoXCJtb21lbnRcIik7XG5jb25zdCBVU0FfTVNUX1RaX0NPREUgPSBcIk1TVFwiO1xuY29uc3QgVVNBX1RaX0NPREUgPSBcIlBTVFwiO1xuY29uc3QgRVVfVFpfQ09ERSA9IFwiQ0VUXCI7XG5cbmV4cG9ydCBjb25zdCBOZ3hEYXRldGltZVJhbmdlUGlja2VyQ29uc3RhbnRzID0ge1xuICBERUZBVUxUOiB7XG4gICAgVFlQRTogXCJkYWlseVwiLFxuICAgIElOUFVUX0NMQVNTOiBcIm0xZHJwXCIsXG4gICAgREFURV9GUk9NQVQ6IFwiWVlZWS1NTS1ERFwiLFxuICAgIFRJTUVfRk9STUFUOiBcIkhIOm1tXCIsXG4gICAgU1RBUlRfREFURTogbW9tZW50KCkuZm9ybWF0KFwiWVlZWS1NTS1ERFwiKSxcbiAgICBFTkRfREFURTogbW9tZW50KCkuZm9ybWF0KFwiWVlZWS1NTS1ERFwiKSxcbiAgICBNSU5fREFURTogbW9tZW50KClcbiAgICAgIC5zdWJ0cmFjdCgyLCBcInllYXJcIilcbiAgICAgIC5zdGFydE9mKFwieWVhclwiKVxuICAgICAgLmZvcm1hdChcIllZWVktTU0tRERcIiksXG4gICAgTUFYX0RBVEU6IG1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tRERcIiksXG4gICAgU1RBUlRfVElNRTogXCIwMDowMFwiLFxuICAgIEVORF9USU1FOiBcIjIzOjU5XCIsXG4gICAgTU9ERUxfS0VZUzogW1wiZGFpbHlcIiwgXCJ3ZWVrbHlcIiwgXCJtb250aGx5XCIsIFwicXVhcnRlcmx5XCIsIFwieWVhcmx5XCJdLFxuICAgIFRaX0NPREU6IFVTQV9NU1RfVFpfQ09ERVxuICB9LFxuICBDT05TVEFOVDoge1xuICAgIE1PTlRIU19BVkFJTEFCTEU6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXSxcbiAgICBVU0FfTVNUX1RaX0NPREUsXG4gICAgVVNBX1RaX0NPREUsXG4gICAgRVVfVFpfQ09ERSxcbiAgICBUWl9DT0RFUzogW1VTQV9UWl9DT0RFLCBFVV9UWl9DT0RFXSxcbiAgICBPRkZTRVRTOiB7XG4gICAgICBbVVNBX1RaX0NPREVdOiB7XG4gICAgICAgIFNPOiAtNyxcbiAgICAgICAgV086IC04XG4gICAgICB9LFxuICAgICAgW0VVX1RaX0NPREVdOiB7XG4gICAgICAgIFNPOiAxLFxuICAgICAgICBXTzogMFxuICAgICAgfVxuICAgIH0sXG4gICAgVFpfTkFNRVM6IHtcbiAgICAgIFtVU0FfTVNUX1RaX0NPREVdOiBcIkFtZXJpY2EvUGhvZW5peFwiLFxuICAgICAgW1VTQV9UWl9DT0RFXTogXCJBbWVyaWNhL0xvc19BbmdlbGVzXCIsXG4gICAgICBbRVVfVFpfQ09ERV06IFwiRXVyb3BlL0JlcmxpblwiXG4gICAgfVxuICB9XG59O1xuIl19