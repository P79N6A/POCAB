/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * DateRange Type represents start date and end date.
 */
var /**
 * DateRange Type represents start date and end date.
 */
DateRange = /** @class */ (function () {
    /**
     * Examples:
   ```typescript
  const d1 = new DateRange();
  const d2 = new DateRange(new Date(), new Date(2018, 9, 10));
   ```
     * @param start [Optional] Start Date. Default: null.
     * @param end [Optional] End Date. Default: null
     */
    function DateRange(start, end) {
        if (start === void 0) { start = null; }
        if (end === void 0) { end = null; }
        this.start = start;
        this.end = end;
    }
    /**
     * Examples:
   ```typescript
  const d1 = DateRange.nextDays(7);
  // a date range of next week since today
   ```
     * @param n Number of days after today.
     */
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextDays(7);
     * // a date range of next week since today
     * ```
     * @param {?} n Number of days after today.
     * @return {?}
     */
    DateRange.nextDays = /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextDays(7);
     * // a date range of next week since today
     * ```
     * @param {?} n Number of days after today.
     * @return {?}
     */
    function (n) {
        /** @type {?} */
        var start = new Date();
        /** @type {?} */
        var end = new Date();
        end.setDate(end.getDate() + n);
        return new DateRange(start, end);
    };
    /**
     * Examples:
   ```typescript
  const d1 = DateRange.nextTwoWeeks();
  // a date range of next two weeks since today
   ```
     */
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextTwoWeeks();
     * // a date range of next two weeks since today
     * ```
     * @return {?}
     */
    DateRange.nextTwoWeeks = /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextTwoWeeks();
     * // a date range of next two weeks since today
     * ```
     * @return {?}
     */
    function () {
        return DateRange.nextDays(14);
    };
    /**
     * Examples:
   ```typescript
  const d1 = DateRange.nextMonth();
  // a date range of next month since today
   ```
     */
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextMonth();
     * // a date range of next month since today
     * ```
     * @return {?}
     */
    DateRange.nextMonth = /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextMonth();
     * // a date range of next month since today
     * ```
     * @return {?}
     */
    function () {
        /** @type {?} */
        var start = new Date();
        /** @type {?} */
        var end = new Date();
        end.setMonth(end.getMonth() + 1);
        return new DateRange(start, end);
    };
    /**
   * Examples:
 ```typescript
const d1 = DateRange.lastMonth();
// a date range of last month till today
 ```
   */
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.lastMonth();
     * // a date range of last month till today
     * ```
     * @return {?}
     */
    DateRange.lastMonth = /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.lastMonth();
     * // a date range of last month till today
     * ```
     * @return {?}
     */
    function () {
        /** @type {?} */
        var start = new Date();
        /** @type {?} */
        var end = new Date();
        start.setMonth(start.getMonth() - 1);
        return new DateRange(start, end);
    };
    /**
     * Examples:
   ```typescript
  const d1 = DateRange.create({});
   ```
     * @param start start date of range you're creating
     * @param end end date of range you're creating
     */
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.create({});
     * ```
     * @param {?} start start date of range you're creating
     * @param {?} end end date of range you're creating
     * @return {?}
     */
    DateRange.create = /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.create({});
     * ```
     * @param {?} start start date of range you're creating
     * @param {?} end end date of range you're creating
     * @return {?}
     */
    function (start, end) {
        /** @type {?} */
        var startDate = null;
        /** @type {?} */
        var endDate = null;
        if (DateRange.isValidDate(start)) {
            startDate = new Date(start);
        }
        if (DateRange.isValidDate(end)) {
            endDate = new Date(end);
        }
        return new DateRange(startDate, endDate);
    };
    /**
     * Examples:
   ```typescript
  const isValid = DateRange.isValidDate(new Date());
   ```
     * @param value date you want to verify as date
     */
    /**
     * Examples:
     * ```typescript
     * const isValid = DateRange.isValidDate(new Date());
     * ```
     * @param {?} value date you want to verify as date
     * @return {?}
     */
    DateRange.isValidDate = /**
     * Examples:
     * ```typescript
     * const isValid = DateRange.isValidDate(new Date());
     * ```
     * @param {?} value date you want to verify as date
     * @return {?}
     */
    function (value) {
        if (!value) {
            return false;
        }
        switch (typeof value) {
            case 'number':
                return true;
            case 'string':
                return !isNaN(Date.parse(value));
            case 'object':
                if (value instanceof Date) {
                    return !isNaN(value.getTime());
                }
                break;
            default:
                return false;
        }
    };
    return DateRange;
}());
/**
 * DateRange Type represents start date and end date.
 */
export { DateRange };
if (false) {
    /** @type {?} */
    DateRange.prototype.start;
    /** @type {?} */
    DateRange.prototype.end;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yYW5nZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B1aW93YS9kYXRlLXJhbmdlLXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvZGF0ZS1yYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0E7Ozs7SUFDRTs7Ozs7Ozs7T0FRRztJQUNILG1CQUFtQixLQUFrQixFQUFTLEdBQWdCO1FBQTNDLHNCQUFBLEVBQUEsWUFBa0I7UUFBUyxvQkFBQSxFQUFBLFVBQWdCO1FBQTNDLFVBQUssR0FBTCxLQUFLLENBQWE7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFhO0lBQUcsQ0FBQztJQUVsRTs7Ozs7OztPQU9HOzs7Ozs7Ozs7O0lBQ0ksa0JBQVE7Ozs7Ozs7OztJQUFmLFVBQWdCLENBQVM7O1lBQ2pCLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRTs7WUFDbEIsR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE9BQU8sSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7Ozs7O09BTUc7Ozs7Ozs7OztJQUNJLHNCQUFZOzs7Ozs7OztJQUFuQjtRQUNFLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7OztPQU1HOzs7Ozs7Ozs7SUFDSSxtQkFBUzs7Ozs7Ozs7SUFBaEI7O1lBQ1EsS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFOztZQUNsQixHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDdEIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVDOzs7Ozs7S0FNQzs7Ozs7Ozs7O0lBQ0ksbUJBQVM7Ozs7Ozs7O0lBQWhCOztZQUNRLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRTs7WUFDbEIsR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ3RCLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7Ozs7OztPQU9HOzs7Ozs7Ozs7O0lBQ0ksZ0JBQU07Ozs7Ozs7OztJQUFiLFVBQWMsS0FBVSxFQUFFLEdBQVE7O1lBQzVCLFNBQVMsR0FBRyxJQUFJOztZQUNoQixPQUFPLEdBQUcsSUFBSTtRQUNsQixJQUFJLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDaEMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7Ozs7O09BTUc7Ozs7Ozs7OztJQUNJLHFCQUFXOzs7Ozs7OztJQUFsQixVQUFtQixLQUFVO1FBQzNCLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsUUFBUSxPQUFPLEtBQUssRUFBRTtZQUNwQixLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxJQUFJLENBQUM7WUFDZCxLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbkMsS0FBSyxRQUFRO2dCQUNYLElBQUksS0FBSyxZQUFZLElBQUksRUFBRTtvQkFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztpQkFDaEM7Z0JBQ0QsTUFBTTtZQUNSO2dCQUNFLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FBQyxBQWhIRCxJQWdIQzs7Ozs7OztJQXRHYSwwQkFBeUI7O0lBQUUsd0JBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERhdGVSYW5nZSBUeXBlIHJlcHJlc2VudHMgc3RhcnQgZGF0ZSBhbmQgZW5kIGRhdGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGF0ZVJhbmdlIHtcclxuICAvKipcclxuICAgKiBFeGFtcGxlczpcclxuIGBgYHR5cGVzY3JpcHRcclxuY29uc3QgZDEgPSBuZXcgRGF0ZVJhbmdlKCk7XHJcbmNvbnN0IGQyID0gbmV3IERhdGVSYW5nZShuZXcgRGF0ZSgpLCBuZXcgRGF0ZSgyMDE4LCA5LCAxMCkpO1xyXG4gYGBgXHJcbiAgICogQHBhcmFtIHN0YXJ0IFtPcHRpb25hbF0gU3RhcnQgRGF0ZS4gRGVmYXVsdDogbnVsbC5cclxuICAgKiBAcGFyYW0gZW5kIFtPcHRpb25hbF0gRW5kIERhdGUuIERlZmF1bHQ6IG51bGxcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RhcnQ6IERhdGUgPSBudWxsLCBwdWJsaWMgZW5kOiBEYXRlID0gbnVsbCkge31cclxuXHJcbiAgLyoqXHJcbiAgICogRXhhbXBsZXM6XHJcbiBgYGB0eXBlc2NyaXB0XHJcbmNvbnN0IGQxID0gRGF0ZVJhbmdlLm5leHREYXlzKDcpO1xyXG4vLyBhIGRhdGUgcmFuZ2Ugb2YgbmV4dCB3ZWVrIHNpbmNlIHRvZGF5XHJcbiBgYGBcclxuICAgKiBAcGFyYW0gbiBOdW1iZXIgb2YgZGF5cyBhZnRlciB0b2RheS5cclxuICAgKi9cclxuICBzdGF0aWMgbmV4dERheXMobjogbnVtYmVyKTogRGF0ZVJhbmdlIHtcclxuICAgIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoKTtcclxuICAgIGNvbnN0IGVuZCA9IG5ldyBEYXRlKCk7XHJcbiAgICBlbmQuc2V0RGF0ZShlbmQuZ2V0RGF0ZSgpICsgbik7XHJcbiAgICByZXR1cm4gbmV3IERhdGVSYW5nZShzdGFydCwgZW5kKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4YW1wbGVzOlxyXG4gYGBgdHlwZXNjcmlwdFxyXG5jb25zdCBkMSA9IERhdGVSYW5nZS5uZXh0VHdvV2Vla3MoKTtcclxuLy8gYSBkYXRlIHJhbmdlIG9mIG5leHQgdHdvIHdlZWtzIHNpbmNlIHRvZGF5XHJcbiBgYGBcclxuICAgKi9cclxuICBzdGF0aWMgbmV4dFR3b1dlZWtzKCk6IERhdGVSYW5nZSB7XHJcbiAgICByZXR1cm4gRGF0ZVJhbmdlLm5leHREYXlzKDE0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4YW1wbGVzOlxyXG4gYGBgdHlwZXNjcmlwdFxyXG5jb25zdCBkMSA9IERhdGVSYW5nZS5uZXh0TW9udGgoKTtcclxuLy8gYSBkYXRlIHJhbmdlIG9mIG5leHQgbW9udGggc2luY2UgdG9kYXlcclxuIGBgYFxyXG4gICAqL1xyXG4gIHN0YXRpYyBuZXh0TW9udGgoKTogRGF0ZVJhbmdlIHtcclxuICAgIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoKTtcclxuICAgIGNvbnN0IGVuZCA9IG5ldyBEYXRlKCk7XHJcbiAgICBlbmQuc2V0TW9udGgoZW5kLmdldE1vbnRoKCkgKyAxKTtcclxuICAgIHJldHVybiBuZXcgRGF0ZVJhbmdlKHN0YXJ0LCBlbmQpO1xyXG4gIH1cclxuXHJcbiAgICAvKipcclxuICAgKiBFeGFtcGxlczpcclxuIGBgYHR5cGVzY3JpcHRcclxuY29uc3QgZDEgPSBEYXRlUmFuZ2UubGFzdE1vbnRoKCk7XHJcbi8vIGEgZGF0ZSByYW5nZSBvZiBsYXN0IG1vbnRoIHRpbGwgdG9kYXlcclxuIGBgYFxyXG4gICAqL1xyXG4gIHN0YXRpYyBsYXN0TW9udGgoKTogRGF0ZVJhbmdlIHtcclxuICAgIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoKTtcclxuICAgIGNvbnN0IGVuZCA9IG5ldyBEYXRlKCk7XHJcbiAgICBzdGFydC5zZXRNb250aChzdGFydC5nZXRNb250aCgpIC0gMSk7XHJcbiAgICByZXR1cm4gbmV3IERhdGVSYW5nZShzdGFydCwgZW5kKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4YW1wbGVzOlxyXG4gYGBgdHlwZXNjcmlwdFxyXG5jb25zdCBkMSA9IERhdGVSYW5nZS5jcmVhdGUoe30pO1xyXG4gYGBgXHJcbiAgICogQHBhcmFtIHN0YXJ0IHN0YXJ0IGRhdGUgb2YgcmFuZ2UgeW91J3JlIGNyZWF0aW5nXHJcbiAgICogQHBhcmFtIGVuZCBlbmQgZGF0ZSBvZiByYW5nZSB5b3UncmUgY3JlYXRpbmdcclxuICAgKi9cclxuICBzdGF0aWMgY3JlYXRlKHN0YXJ0OiBhbnksIGVuZDogYW55KTogRGF0ZVJhbmdlIHtcclxuICAgIGxldCBzdGFydERhdGUgPSBudWxsO1xyXG4gICAgbGV0IGVuZERhdGUgPSBudWxsO1xyXG4gICAgaWYgKERhdGVSYW5nZS5pc1ZhbGlkRGF0ZShzdGFydCkpIHtcclxuICAgICAgc3RhcnREYXRlID0gbmV3IERhdGUoc3RhcnQpO1xyXG4gICAgfVxyXG4gICAgaWYgKERhdGVSYW5nZS5pc1ZhbGlkRGF0ZShlbmQpKSB7XHJcbiAgICAgIGVuZERhdGUgPSBuZXcgRGF0ZShlbmQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBEYXRlUmFuZ2Uoc3RhcnREYXRlLCBlbmREYXRlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4YW1wbGVzOlxyXG4gYGBgdHlwZXNjcmlwdFxyXG5jb25zdCBpc1ZhbGlkID0gRGF0ZVJhbmdlLmlzVmFsaWREYXRlKG5ldyBEYXRlKCkpO1xyXG4gYGBgXHJcbiAgICogQHBhcmFtIHZhbHVlIGRhdGUgeW91IHdhbnQgdG8gdmVyaWZ5IGFzIGRhdGVcclxuICAgKi9cclxuICBzdGF0aWMgaXNWYWxpZERhdGUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcclxuICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICByZXR1cm4gIWlzTmFOKERhdGUucGFyc2UodmFsdWUpKTtcclxuICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgICByZXR1cm4gIWlzTmFOKHZhbHVlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19