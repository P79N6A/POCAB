/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, ViewChild } from '@angular/core';
import { NgbInputDatepicker } from '@ng-bootstrap/ng-bootstrap';
import { DateRange } from '../models/date-range';
import { NgbDateNativeAdapter } from '../services/NgbDateNativeAdapter';
export class DateRangePickerComponent {
    /**
     * @param {?} dateAdapter
     */
    constructor(dateAdapter) {
        this.dateAdapter = dateAdapter;
        this.disabled = false;
        this.dateRangeChange = new EventEmitter();
        this.isInside = date => date.after(this.fromDate) && date.before(this.toDate);
        this.isFrom = date => date.equals(this.fromDate);
        this.isTo = date => date.equals(this.toDate);
        this.isDisabled = date => date.after(this.max) || date.before(this.min);
        this.isInFuture = date => date.after(this.toDate);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.fromDate = this.dateAdapter.fromModel(this.dateRange.start);
        this.toDate = this.dateAdapter.fromModel(this.dateRange.end);
        this.min = this.minDate ? this.dateAdapter.fromModel(this.minDate) : null;
        this.max = this.maxDate ? this.dateAdapter.fromModel(this.maxDate) : null;
        this.inputElRef.nativeElement.value = this.formatInputText();
        if (this.fromDate) {
            this.dp.startDate = {
                year: this.fromDate.year,
                month: this.fromDate.month
            };
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.dateRange || changes.disabled) {
            this.ngOnInit();
        }
    }
    /**
     * @param {?} date
     * @param {?} dp
     * @return {?}
     */
    onDateChange(date, dp) {
        if (!this.fromDate && !this.toDate) {
            this.fromDate = date;
            this.dateRange.start = this.dateAdapter.toModel(this.fromDate);
        }
        else if (this.fromDate && !this.toDate && date.after(this.fromDate)) {
            this.toDate = date;
            this.dateRange.end = this.dateAdapter.toModel(this.toDate);
            dp.close();
        }
        else {
            this.toDate = null;
            this.fromDate = date;
            this.dateRange.start = this.dateAdapter.toModel(this.fromDate);
            this.dateRange.end = null;
        }
        this.inputElRef.nativeElement.value = this.formatInputText();
        this.dateRangeChange.emit(this.dateRange);
    }
    /**
     * @private
     * @return {?}
     */
    formatInputText() {
        if (this.dateRange.start &&
            this.dateRange.end &&
            DateRange.isValidDate(this.dateRange.start) &&
            DateRange.isValidDate(this.dateRange.end)) {
            return `${this.dateRange.start.toLocaleDateString()} - ${this.dateRange.end.toLocaleDateString()}`;
        }
        return '';
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isHovered(date) {
        return (this.fromDate &&
            !this.toDate &&
            this.hoveredDate &&
            date.after(this.fromDate) &&
            date.before(this.hoveredDate));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isWeekend(date) {
        /** @type {?} */
        const d = new Date(date.year, date.month - 1, date.day);
        return d.getDay() === 0 || d.getDay() === 6;
    }
}
DateRangePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'date-range-picker',
                template: "<div class=\"input-group\">\r\n  <input ngbDatepicker #dp=\"ngbDatepicker\" type=\"text\" class=\"form-control\" style=\"max-width:200px;\" readonly\r\n    [disabled]=\"disabled\" [autoClose]=\"false\" [displayMonths]=\"2\" [dayTemplate]=\"t\" [showWeekNumbers]=\"false\"\r\n    [markDisabled]=\"isDisabled\" [firstDayOfWeek]=\"7\" (click)=\"dp.toggle()\" (dateSelect)=\"onDateChange($event, dp)\">\r\n  <div class=\"input-group-append\">\r\n    <button class=\"btn btn-outline-secondary d-flex align-items-center\" (click)=\"dp.toggle()\" type=\"button\">\r\n      <svg aria-hidden=\"true\" role=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\r\n        <path fill=\"currentColor\" d=\"M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z\"></path>\r\n      </svg>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #t let-date=\"date\" let-focused=\"focused\" let-disabled=\"disabled\">\r\n  <span class=\"custom-day\" [class.focused]=\"focused\" [class.range]=\"isFrom(date) || isTo(date) || isInside(date) || isHovered(date)\"\r\n    [class.faded]=\"isHovered(date) || isInside(date)\" [class.weekend]=\"isWeekend(date)\" [class.disabled]=\"disabled\"\r\n    (mouseenter)=\"hoveredDate = date\" (mouseleave)=\"hoveredDate = null\">\r\n    {{ date.day }}\r\n  </span>\r\n</ng-template>\r\n",
                styles: [".custom-day{text-align:center;padding:.185rem .25rem;display:inline-block;height:2rem;width:2rem}.custom-day.focused{background-color:#e6e6e6}.custom-day.range,.custom-day:hover{background-color:#0275d8;color:#fff}.custom-day.faded{background-color:rgba(2,117,216,.5)}.custom-day.weekend{color:#ff6e6e}.custom-day.disabled{color:#c8cdd2}svg{width:1rem;height:1rem}"]
            }] }
];
/** @nocollapse */
DateRangePickerComponent.ctorParameters = () => [
    { type: NgbDateNativeAdapter }
];
DateRangePickerComponent.propDecorators = {
    dateRange: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    disabled: [{ type: Input }],
    dateRangeChange: [{ type: Output }],
    inputElRef: [{ type: ViewChild, args: ['dp', { read: ElementRef },] }],
    dp: [{ type: ViewChild, args: ['dp',] }]
};
if (false) {
    /** @type {?} */
    DateRangePickerComponent.prototype.dateRange;
    /** @type {?} */
    DateRangePickerComponent.prototype.minDate;
    /** @type {?} */
    DateRangePickerComponent.prototype.maxDate;
    /** @type {?} */
    DateRangePickerComponent.prototype.disabled;
    /** @type {?} */
    DateRangePickerComponent.prototype.dateRangeChange;
    /** @type {?} */
    DateRangePickerComponent.prototype.hoveredDate;
    /**
     * @type {?}
     * @private
     */
    DateRangePickerComponent.prototype.fromDate;
    /**
     * @type {?}
     * @private
     */
    DateRangePickerComponent.prototype.toDate;
    /**
     * @type {?}
     * @private
     */
    DateRangePickerComponent.prototype.min;
    /**
     * @type {?}
     * @private
     */
    DateRangePickerComponent.prototype.max;
    /**
     * @type {?}
     * @private
     */
    DateRangePickerComponent.prototype.inputElRef;
    /**
     * @type {?}
     * @private
     */
    DateRangePickerComponent.prototype.dp;
    /** @type {?} */
    DateRangePickerComponent.prototype.isInside;
    /** @type {?} */
    DateRangePickerComponent.prototype.isFrom;
    /** @type {?} */
    DateRangePickerComponent.prototype.isTo;
    /** @type {?} */
    DateRangePickerComponent.prototype.isDisabled;
    /** @type {?} */
    DateRangePickerComponent.prototype.isInFuture;
    /**
     * @type {?}
     * @private
     */
    DateRangePickerComponent.prototype.dateAdapter;
}
//# sourceMappingURL=data:application/json;base64,