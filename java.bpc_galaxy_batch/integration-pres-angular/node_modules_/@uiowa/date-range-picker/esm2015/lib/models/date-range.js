/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * DateRange Type represents start date and end date.
 */
export class DateRange {
    /**
     * Examples:
     * ```typescript
     * const d1 = new DateRange();
     * const d2 = new DateRange(new Date(), new Date(2018, 9, 10));
     * ```
     * @param {?=} start [Optional] Start Date. Default: null.
     * @param {?=} end [Optional] End Date. Default: null
     */
    constructor(start = null, end = null) {
        this.start = start;
        this.end = end;
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextDays(7);
     * // a date range of next week since today
     * ```
     * @param {?} n Number of days after today.
     * @return {?}
     */
    static nextDays(n) {
        /** @type {?} */
        const start = new Date();
        /** @type {?} */
        const end = new Date();
        end.setDate(end.getDate() + n);
        return new DateRange(start, end);
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextTwoWeeks();
     * // a date range of next two weeks since today
     * ```
     * @return {?}
     */
    static nextTwoWeeks() {
        return DateRange.nextDays(14);
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextMonth();
     * // a date range of next month since today
     * ```
     * @return {?}
     */
    static nextMonth() {
        /** @type {?} */
        const start = new Date();
        /** @type {?} */
        const end = new Date();
        end.setMonth(end.getMonth() + 1);
        return new DateRange(start, end);
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.lastMonth();
     * // a date range of last month till today
     * ```
     * @return {?}
     */
    static lastMonth() {
        /** @type {?} */
        const start = new Date();
        /** @type {?} */
        const end = new Date();
        start.setMonth(start.getMonth() - 1);
        return new DateRange(start, end);
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.create({});
     * ```
     * @param {?} start start date of range you're creating
     * @param {?} end end date of range you're creating
     * @return {?}
     */
    static create(start, end) {
        /** @type {?} */
        let startDate = null;
        /** @type {?} */
        let endDate = null;
        if (DateRange.isValidDate(start)) {
            startDate = new Date(start);
        }
        if (DateRange.isValidDate(end)) {
            endDate = new Date(end);
        }
        return new DateRange(startDate, endDate);
    }
    /**
     * Examples:
     * ```typescript
     * const isValid = DateRange.isValidDate(new Date());
     * ```
     * @param {?} value date you want to verify as date
     * @return {?}
     */
    static isValidDate(value) {
        if (!value) {
            return false;
        }
        switch (typeof value) {
            case 'number':
                return true;
            case 'string':
                return !isNaN(Date.parse(value));
            case 'object':
                if (value instanceof Date) {
                    return !isNaN(value.getTime());
                }
                break;
            default:
                return false;
        }
    }
}
if (false) {
    /** @type {?} */
    DateRange.prototype.start;
    /** @type {?} */
    DateRange.prototype.end;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yYW5nZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B1aW93YS9kYXRlLXJhbmdlLXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvZGF0ZS1yYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsTUFBTSxPQUFPLFNBQVM7Ozs7Ozs7Ozs7SUFVcEIsWUFBbUIsUUFBYyxJQUFJLEVBQVMsTUFBWSxJQUFJO1FBQTNDLFVBQUssR0FBTCxLQUFLLENBQWE7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFhO0lBQUcsQ0FBQzs7Ozs7Ozs7OztJQVVsRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQVM7O2NBQ2pCLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRTs7Y0FDbEIsR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE9BQU8sSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7Ozs7OztJQVNELE1BQU0sQ0FBQyxZQUFZO1FBQ2pCLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7Ozs7SUFTRCxNQUFNLENBQUMsU0FBUzs7Y0FDUixLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUU7O2NBQ2xCLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNqQyxPQUFPLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7Ozs7SUFTRCxNQUFNLENBQUMsU0FBUzs7Y0FDUixLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUU7O2NBQ2xCLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7Ozs7O0lBVUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFVLEVBQUUsR0FBUTs7WUFDNUIsU0FBUyxHQUFHLElBQUk7O1lBQ2hCLE9BQU8sR0FBRyxJQUFJO1FBQ2xCLElBQUksU0FBUyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNoQyxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0I7UUFDRCxJQUFJLFNBQVMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDOUIsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7Ozs7O0lBU0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFVO1FBQzNCLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsUUFBUSxPQUFPLEtBQUssRUFBRTtZQUNwQixLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxJQUFJLENBQUM7WUFDZCxLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbkMsS0FBSyxRQUFRO2dCQUNYLElBQUksS0FBSyxZQUFZLElBQUksRUFBRTtvQkFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztpQkFDaEM7Z0JBQ0QsTUFBTTtZQUNSO2dCQUNFLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztDQUNGOzs7SUF0R2EsMEJBQXlCOztJQUFFLHdCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEYXRlUmFuZ2UgVHlwZSByZXByZXNlbnRzIHN0YXJ0IGRhdGUgYW5kIGVuZCBkYXRlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERhdGVSYW5nZSB7XHJcbiAgLyoqXHJcbiAgICogRXhhbXBsZXM6XHJcbiBgYGB0eXBlc2NyaXB0XHJcbmNvbnN0IGQxID0gbmV3IERhdGVSYW5nZSgpO1xyXG5jb25zdCBkMiA9IG5ldyBEYXRlUmFuZ2UobmV3IERhdGUoKSwgbmV3IERhdGUoMjAxOCwgOSwgMTApKTtcclxuIGBgYFxyXG4gICAqIEBwYXJhbSBzdGFydCBbT3B0aW9uYWxdIFN0YXJ0IERhdGUuIERlZmF1bHQ6IG51bGwuXHJcbiAgICogQHBhcmFtIGVuZCBbT3B0aW9uYWxdIEVuZCBEYXRlLiBEZWZhdWx0OiBudWxsXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocHVibGljIHN0YXJ0OiBEYXRlID0gbnVsbCwgcHVibGljIGVuZDogRGF0ZSA9IG51bGwpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4YW1wbGVzOlxyXG4gYGBgdHlwZXNjcmlwdFxyXG5jb25zdCBkMSA9IERhdGVSYW5nZS5uZXh0RGF5cyg3KTtcclxuLy8gYSBkYXRlIHJhbmdlIG9mIG5leHQgd2VlayBzaW5jZSB0b2RheVxyXG4gYGBgXHJcbiAgICogQHBhcmFtIG4gTnVtYmVyIG9mIGRheXMgYWZ0ZXIgdG9kYXkuXHJcbiAgICovXHJcbiAgc3RhdGljIG5leHREYXlzKG46IG51bWJlcik6IERhdGVSYW5nZSB7XHJcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKCk7XHJcbiAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgZW5kLnNldERhdGUoZW5kLmdldERhdGUoKSArIG4pO1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlUmFuZ2Uoc3RhcnQsIGVuZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeGFtcGxlczpcclxuIGBgYHR5cGVzY3JpcHRcclxuY29uc3QgZDEgPSBEYXRlUmFuZ2UubmV4dFR3b1dlZWtzKCk7XHJcbi8vIGEgZGF0ZSByYW5nZSBvZiBuZXh0IHR3byB3ZWVrcyBzaW5jZSB0b2RheVxyXG4gYGBgXHJcbiAgICovXHJcbiAgc3RhdGljIG5leHRUd29XZWVrcygpOiBEYXRlUmFuZ2Uge1xyXG4gICAgcmV0dXJuIERhdGVSYW5nZS5uZXh0RGF5cygxNCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeGFtcGxlczpcclxuIGBgYHR5cGVzY3JpcHRcclxuY29uc3QgZDEgPSBEYXRlUmFuZ2UubmV4dE1vbnRoKCk7XHJcbi8vIGEgZGF0ZSByYW5nZSBvZiBuZXh0IG1vbnRoIHNpbmNlIHRvZGF5XHJcbiBgYGBcclxuICAgKi9cclxuICBzdGF0aWMgbmV4dE1vbnRoKCk6IERhdGVSYW5nZSB7XHJcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKCk7XHJcbiAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgZW5kLnNldE1vbnRoKGVuZC5nZXRNb250aCgpICsgMSk7XHJcbiAgICByZXR1cm4gbmV3IERhdGVSYW5nZShzdGFydCwgZW5kKTtcclxuICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICogRXhhbXBsZXM6XHJcbiBgYGB0eXBlc2NyaXB0XHJcbmNvbnN0IGQxID0gRGF0ZVJhbmdlLmxhc3RNb250aCgpO1xyXG4vLyBhIGRhdGUgcmFuZ2Ugb2YgbGFzdCBtb250aCB0aWxsIHRvZGF5XHJcbiBgYGBcclxuICAgKi9cclxuICBzdGF0aWMgbGFzdE1vbnRoKCk6IERhdGVSYW5nZSB7XHJcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKCk7XHJcbiAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgc3RhcnQuc2V0TW9udGgoc3RhcnQuZ2V0TW9udGgoKSAtIDEpO1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlUmFuZ2Uoc3RhcnQsIGVuZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeGFtcGxlczpcclxuIGBgYHR5cGVzY3JpcHRcclxuY29uc3QgZDEgPSBEYXRlUmFuZ2UuY3JlYXRlKHt9KTtcclxuIGBgYFxyXG4gICAqIEBwYXJhbSBzdGFydCBzdGFydCBkYXRlIG9mIHJhbmdlIHlvdSdyZSBjcmVhdGluZ1xyXG4gICAqIEBwYXJhbSBlbmQgZW5kIGRhdGUgb2YgcmFuZ2UgeW91J3JlIGNyZWF0aW5nXHJcbiAgICovXHJcbiAgc3RhdGljIGNyZWF0ZShzdGFydDogYW55LCBlbmQ6IGFueSk6IERhdGVSYW5nZSB7XHJcbiAgICBsZXQgc3RhcnREYXRlID0gbnVsbDtcclxuICAgIGxldCBlbmREYXRlID0gbnVsbDtcclxuICAgIGlmIChEYXRlUmFuZ2UuaXNWYWxpZERhdGUoc3RhcnQpKSB7XHJcbiAgICAgIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0KTtcclxuICAgIH1cclxuICAgIGlmIChEYXRlUmFuZ2UuaXNWYWxpZERhdGUoZW5kKSkge1xyXG4gICAgICBlbmREYXRlID0gbmV3IERhdGUoZW5kKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgRGF0ZVJhbmdlKHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeGFtcGxlczpcclxuIGBgYHR5cGVzY3JpcHRcclxuY29uc3QgaXNWYWxpZCA9IERhdGVSYW5nZS5pc1ZhbGlkRGF0ZShuZXcgRGF0ZSgpKTtcclxuIGBgYFxyXG4gICAqIEBwYXJhbSB2YWx1ZSBkYXRlIHlvdSB3YW50IHRvIHZlcmlmeSBhcyBkYXRlXHJcbiAgICovXHJcbiAgc3RhdGljIGlzVmFsaWREYXRlKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XHJcbiAgICAgIGNhc2UgJ251bWJlcic6XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgcmV0dXJuICFpc05hTihEYXRlLnBhcnNlKHZhbHVlKSk7XHJcbiAgICAgIGNhc2UgJ29iamVjdCc6XHJcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgICAgcmV0dXJuICFpc05hTih2YWx1ZS5nZXRUaW1lKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==