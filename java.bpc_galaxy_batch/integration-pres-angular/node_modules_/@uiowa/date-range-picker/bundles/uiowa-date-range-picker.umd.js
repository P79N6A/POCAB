(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/forms'), require('@angular/core'), require('@ng-bootstrap/ng-bootstrap')) :
  typeof define === 'function' && define.amd ? define('@uiowa/date-range-picker', ['exports', '@angular/common', '@angular/forms', '@angular/core', '@ng-bootstrap/ng-bootstrap'], factory) :
  (factory((global.uiowa = global.uiowa || {}, global.uiowa['date-range-picker'] = {}),global.ng.common,global.ng.forms,global.ng.core,global['@ng-bootstrap/ng-bootstrap']));
}(this, (function (exports,common,forms,core,ngBootstrap) { 'use strict';

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
   */
  /**
   * DateRange Type represents start date and end date.
   */
  var /**
   * DateRange Type represents start date and end date.
   */ DateRange = /** @class */ (function () {
      /**
       * Examples:
     ```typescript
    const d1 = new DateRange();
    const d2 = new DateRange(new Date(), new Date(2018, 9, 10));
     ```
       * @param start [Optional] Start Date. Default: null.
       * @param end [Optional] End Date. Default: null
       */
      function DateRange(start, end) {
          if (start === void 0) {
              start = null;
          }
          if (end === void 0) {
              end = null;
          }
          this.start = start;
          this.end = end;
      }
      /**
       * Examples:
     ```typescript
    const d1 = DateRange.nextDays(7);
    // a date range of next week since today
     ```
       * @param n Number of days after today.
       */
      /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.nextDays(7);
       * // a date range of next week since today
       * ```
       * @param {?} n Number of days after today.
       * @return {?}
       */
      DateRange.nextDays = /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.nextDays(7);
       * // a date range of next week since today
       * ```
       * @param {?} n Number of days after today.
       * @return {?}
       */
          function (n) {
              /** @type {?} */
              var start = new Date();
              /** @type {?} */
              var end = new Date();
              end.setDate(end.getDate() + n);
              return new DateRange(start, end);
          };
      /**
       * Examples:
     ```typescript
    const d1 = DateRange.nextTwoWeeks();
    // a date range of next two weeks since today
     ```
       */
      /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.nextTwoWeeks();
       * // a date range of next two weeks since today
       * ```
       * @return {?}
       */
      DateRange.nextTwoWeeks = /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.nextTwoWeeks();
       * // a date range of next two weeks since today
       * ```
       * @return {?}
       */
          function () {
              return DateRange.nextDays(14);
          };
      /**
       * Examples:
     ```typescript
    const d1 = DateRange.nextMonth();
    // a date range of next month since today
     ```
       */
      /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.nextMonth();
       * // a date range of next month since today
       * ```
       * @return {?}
       */
      DateRange.nextMonth = /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.nextMonth();
       * // a date range of next month since today
       * ```
       * @return {?}
       */
          function () {
              /** @type {?} */
              var start = new Date();
              /** @type {?} */
              var end = new Date();
              end.setMonth(end.getMonth() + 1);
              return new DateRange(start, end);
          };
      /**
     * Examples:
   ```typescript
  const d1 = DateRange.lastMonth();
  // a date range of last month till today
   ```
     */
      /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.lastMonth();
       * // a date range of last month till today
       * ```
       * @return {?}
       */
      DateRange.lastMonth = /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.lastMonth();
       * // a date range of last month till today
       * ```
       * @return {?}
       */
          function () {
              /** @type {?} */
              var start = new Date();
              /** @type {?} */
              var end = new Date();
              start.setMonth(start.getMonth() - 1);
              return new DateRange(start, end);
          };
      /**
       * Examples:
     ```typescript
    const d1 = DateRange.create({});
     ```
       * @param start start date of range you're creating
       * @param end end date of range you're creating
       */
      /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.create({});
       * ```
       * @param {?} start start date of range you're creating
       * @param {?} end end date of range you're creating
       * @return {?}
       */
      DateRange.create = /**
       * Examples:
       * ```typescript
       * const d1 = DateRange.create({});
       * ```
       * @param {?} start start date of range you're creating
       * @param {?} end end date of range you're creating
       * @return {?}
       */
          function (start, end) {
              /** @type {?} */
              var startDate = null;
              /** @type {?} */
              var endDate = null;
              if (DateRange.isValidDate(start)) {
                  startDate = new Date(start);
              }
              if (DateRange.isValidDate(end)) {
                  endDate = new Date(end);
              }
              return new DateRange(startDate, endDate);
          };
      /**
       * Examples:
     ```typescript
    const isValid = DateRange.isValidDate(new Date());
     ```
       * @param value date you want to verify as date
       */
      /**
       * Examples:
       * ```typescript
       * const isValid = DateRange.isValidDate(new Date());
       * ```
       * @param {?} value date you want to verify as date
       * @return {?}
       */
      DateRange.isValidDate = /**
       * Examples:
       * ```typescript
       * const isValid = DateRange.isValidDate(new Date());
       * ```
       * @param {?} value date you want to verify as date
       * @return {?}
       */
          function (value) {
              if (!value) {
                  return false;
              }
              switch (typeof value) {
                  case 'number':
                      return true;
                  case 'string':
                      return !isNaN(Date.parse(value));
                  case 'object':
                      if (value instanceof Date) {
                          return !isNaN(value.getTime());
                      }
                      break;
                  default:
                      return false;
              }
          };
      return DateRange;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
   */
  /**
   * Native Date adapter for Ngb DatePicker
   */
  var NgbDateNativeAdapter = /** @class */ (function () {
      function NgbDateNativeAdapter() {
      }
      /**
       * @param {?} date
       * @return {?}
       */
      NgbDateNativeAdapter.prototype.fromModel = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return date instanceof Date
                  ? new ngBootstrap.NgbDate(date.getFullYear(), date.getMonth() + 1, date.getDate())
                  : null;
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NgbDateNativeAdapter.prototype.toModel = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return date && date.year && date.month
                  ? new Date(date.year, date.month - 1, date.day, 12)
                  : null;
          };
      NgbDateNativeAdapter.decorators = [
          { type: core.Injectable }
      ];
      return NgbDateNativeAdapter;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
   */
  var DateRangePickerComponent = /** @class */ (function () {
      function DateRangePickerComponent(dateAdapter) {
          var _this = this;
          this.dateAdapter = dateAdapter;
          this.disabled = false;
          this.dateRangeChange = new core.EventEmitter();
          this.isInside = function (date) { return date.after(_this.fromDate) && date.before(_this.toDate); };
          this.isFrom = function (date) { return date.equals(_this.fromDate); };
          this.isTo = function (date) { return date.equals(_this.toDate); };
          this.isDisabled = function (date) { return date.after(_this.max) || date.before(_this.min); };
          this.isInFuture = function (date) { return date.after(_this.toDate); };
      }
      /**
       * @return {?}
       */
      DateRangePickerComponent.prototype.ngOnInit = /**
       * @return {?}
       */
          function () {
              this.fromDate = this.dateAdapter.fromModel(this.dateRange.start);
              this.toDate = this.dateAdapter.fromModel(this.dateRange.end);
              this.min = this.minDate ? this.dateAdapter.fromModel(this.minDate) : null;
              this.max = this.maxDate ? this.dateAdapter.fromModel(this.maxDate) : null;
              this.inputElRef.nativeElement.value = this.formatInputText();
              if (this.fromDate) {
                  this.dp.startDate = {
                      year: this.fromDate.year,
                      month: this.fromDate.month
                  };
              }
          };
      /**
       * @param {?} changes
       * @return {?}
       */
      DateRangePickerComponent.prototype.ngOnChanges = /**
       * @param {?} changes
       * @return {?}
       */
          function (changes) {
              if (changes.dateRange || changes.disabled) {
                  this.ngOnInit();
              }
          };
      /**
       * @param {?} date
       * @param {?} dp
       * @return {?}
       */
      DateRangePickerComponent.prototype.onDateChange = /**
       * @param {?} date
       * @param {?} dp
       * @return {?}
       */
          function (date, dp) {
              if (!this.fromDate && !this.toDate) {
                  this.fromDate = date;
                  this.dateRange.start = this.dateAdapter.toModel(this.fromDate);
              }
              else if (this.fromDate && !this.toDate && date.after(this.fromDate)) {
                  this.toDate = date;
                  this.dateRange.end = this.dateAdapter.toModel(this.toDate);
                  dp.close();
              }
              else {
                  this.toDate = null;
                  this.fromDate = date;
                  this.dateRange.start = this.dateAdapter.toModel(this.fromDate);
                  this.dateRange.end = null;
              }
              this.inputElRef.nativeElement.value = this.formatInputText();
              this.dateRangeChange.emit(this.dateRange);
          };
      /**
       * @private
       * @return {?}
       */
      DateRangePickerComponent.prototype.formatInputText = /**
       * @private
       * @return {?}
       */
          function () {
              if (this.dateRange.start &&
                  this.dateRange.end &&
                  DateRange.isValidDate(this.dateRange.start) &&
                  DateRange.isValidDate(this.dateRange.end)) {
                  return this.dateRange.start.toLocaleDateString() + " - " + this.dateRange.end.toLocaleDateString();
              }
              return '';
          };
      /**
       * @param {?} date
       * @return {?}
       */
      DateRangePickerComponent.prototype.isHovered = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              return (this.fromDate &&
                  !this.toDate &&
                  this.hoveredDate &&
                  date.after(this.fromDate) &&
                  date.before(this.hoveredDate));
          };
      /**
       * @param {?} date
       * @return {?}
       */
      DateRangePickerComponent.prototype.isWeekend = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              /** @type {?} */
              var d = new Date(date.year, date.month - 1, date.day);
              return d.getDay() === 0 || d.getDay() === 6;
          };
      DateRangePickerComponent.decorators = [
          { type: core.Component, args: [{
                      selector: 'date-range-picker',
                      template: "<div class=\"input-group\">\r\n  <input ngbDatepicker #dp=\"ngbDatepicker\" type=\"text\" class=\"form-control\" style=\"max-width:200px;\" readonly\r\n    [disabled]=\"disabled\" [autoClose]=\"false\" [displayMonths]=\"2\" [dayTemplate]=\"t\" [showWeekNumbers]=\"false\"\r\n    [markDisabled]=\"isDisabled\" [firstDayOfWeek]=\"7\" (click)=\"dp.toggle()\" (dateSelect)=\"onDateChange($event, dp)\">\r\n  <div class=\"input-group-append\">\r\n    <button class=\"btn btn-outline-secondary d-flex align-items-center\" (click)=\"dp.toggle()\" type=\"button\">\r\n      <svg aria-hidden=\"true\" role=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\r\n        <path fill=\"currentColor\" d=\"M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z\"></path>\r\n      </svg>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #t let-date=\"date\" let-focused=\"focused\" let-disabled=\"disabled\">\r\n  <span class=\"custom-day\" [class.focused]=\"focused\" [class.range]=\"isFrom(date) || isTo(date) || isInside(date) || isHovered(date)\"\r\n    [class.faded]=\"isHovered(date) || isInside(date)\" [class.weekend]=\"isWeekend(date)\" [class.disabled]=\"disabled\"\r\n    (mouseenter)=\"hoveredDate = date\" (mouseleave)=\"hoveredDate = null\">\r\n    {{ date.day }}\r\n  </span>\r\n</ng-template>\r\n",
                      styles: [".custom-day{text-align:center;padding:.185rem .25rem;display:inline-block;height:2rem;width:2rem}.custom-day.focused{background-color:#e6e6e6}.custom-day.range,.custom-day:hover{background-color:#0275d8;color:#fff}.custom-day.faded{background-color:rgba(2,117,216,.5)}.custom-day.weekend{color:#ff6e6e}.custom-day.disabled{color:#c8cdd2}svg{width:1rem;height:1rem}"]
                  }] }
      ];
      /** @nocollapse */
      DateRangePickerComponent.ctorParameters = function () {
          return [
              { type: NgbDateNativeAdapter }
          ];
      };
      DateRangePickerComponent.propDecorators = {
          dateRange: [{ type: core.Input }],
          minDate: [{ type: core.Input }],
          maxDate: [{ type: core.Input }],
          disabled: [{ type: core.Input }],
          dateRangeChange: [{ type: core.Output }],
          inputElRef: [{ type: core.ViewChild, args: ['dp', { read: core.ElementRef },] }],
          dp: [{ type: core.ViewChild, args: ['dp',] }]
      };
      return DateRangePickerComponent;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
   */
  var DatePickerComponent = /** @class */ (function () {
      function DatePickerComponent(dateAdapter) {
          this.dateAdapter = dateAdapter;
          this.disabled = false;
          this.dateChange = new core.EventEmitter();
      }
      /**
       * @return {?}
       */
      DatePickerComponent.prototype.ngOnInit = /**
       * @return {?}
       */
          function () {
              this.ngbDate = this.dateAdapter.fromModel(this.date);
          };
      /**
       * @param {?} changes
       * @return {?}
       */
      DatePickerComponent.prototype.ngOnChanges = /**
       * @param {?} changes
       * @return {?}
       */
          function (changes) {
              if (changes.date || changes.disabled) {
                  this.ngOnInit();
              }
          };
      /**
       * @param {?} date
       * @return {?}
       */
      DatePickerComponent.prototype.onDateChange = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              this.dateChange.emit(this.dateAdapter.toModel(date));
          };
      DatePickerComponent.decorators = [
          { type: core.Component, args: [{
                      selector: 'date-picker',
                      template: "<div class=\"input-group\">\r\n  <input ngbDatepicker #d=\"ngbDatepicker\" class=\"form-control\" name=\"dp\" [(ngModel)]=\"ngbDate\" (click)=\"d.toggle()\"\r\n    [disabled]=\"disabled\" readonly (dateSelect)=\"onDateChange($event)\" style=\"max-width:200px;\">\r\n  <div class=\"input-group-append\">\r\n    <button class=\"btn btn-outline-secondary d-flex align-items-center\" (click)=\"d.toggle()\" type=\"button\">\r\n      <svg aria-hidden=\"true\" role=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\r\n        <path fill=\"currentColor\" d=\"M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z\"></path>\r\n      </svg>\r\n    </button>\r\n  </div>\r\n</div>\r\n",
                      styles: ["svg{width:1rem;height:1rem}"]
                  }] }
      ];
      /** @nocollapse */
      DatePickerComponent.ctorParameters = function () {
          return [
              { type: NgbDateNativeAdapter }
          ];
      };
      DatePickerComponent.propDecorators = {
          date: [{ type: core.Input }],
          disabled: [{ type: core.Input }],
          dateChange: [{ type: core.Output }]
      };
      return DatePickerComponent;
  }());

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */
  var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b)
              if (b.hasOwnProperty(p))
                  d[p] = b[p]; };
      return extendStatics(d, b);
  };
  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
   */
  /**
   * @param {?} value
   * @return {?}
   */
  function padNumber(value) {
      if (isNumber(value)) {
          return ("0" + value).slice(-2);
      }
      else {
          return '';
      }
  }
  /**
   * @param {?} value
   * @return {?}
   */
  function isNumber(value) {
      return !isNaN(toInteger(value));
  }
  /**
   * @param {?} value
   * @return {?}
   */
  function toInteger(value) {
      return parseInt("" + value, 10);
  }
  var NgbDateNativeParserFormatter = /** @class */ (function (_super) {
      __extends(NgbDateNativeParserFormatter, _super);
      function NgbDateNativeParserFormatter() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      /**
       * @param {?} value
       * @return {?}
       */
      NgbDateNativeParserFormatter.prototype.parse = /**
       * @param {?} value
       * @return {?}
       */
          function (value) {
              if (value) {
                  /** @type {?} */
                  var dateParts = value.trim().split('/');
                  if (dateParts.length === 1 && isNumber(dateParts[0])) {
                      return { year: toInteger(dateParts[0]), month: null, day: null };
                  }
                  else if (dateParts.length === 2 &&
                      isNumber(dateParts[0]) &&
                      isNumber(dateParts[1])) {
                      return {
                          year: toInteger(dateParts[1]),
                          month: toInteger(dateParts[0]),
                          day: null
                      };
                  }
                  else if (dateParts.length === 3 &&
                      isNumber(dateParts[0]) &&
                      isNumber(dateParts[1]) &&
                      isNumber(dateParts[2])) {
                      return {
                          year: toInteger(dateParts[2]),
                          month: toInteger(dateParts[1]),
                          day: toInteger(dateParts[0])
                      };
                  }
              }
              return null;
          };
      /**
       * @param {?} date
       * @return {?}
       */
      NgbDateNativeParserFormatter.prototype.format = /**
       * @param {?} date
       * @return {?}
       */
          function (date) {
              /** @type {?} */
              var stringDate = '';
              if (date) {
                  stringDate += isNumber(date.month) ? padNumber(date.month) + '/' : '';
                  stringDate += isNumber(date.day) ? padNumber(date.day) + '/' : '';
                  stringDate += date.year;
              }
              return stringDate;
          };
      NgbDateNativeParserFormatter.decorators = [
          { type: core.Injectable }
      ];
      return NgbDateNativeParserFormatter;
  }(ngBootstrap.NgbDateParserFormatter));

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
   */
  var DateRangePickerModule = /** @class */ (function () {
      function DateRangePickerModule() {
      }
      DateRangePickerModule.decorators = [
          { type: core.NgModule, args: [{
                      imports: [common.CommonModule, forms.FormsModule, ngBootstrap.NgbModule],
                      declarations: [DateRangePickerComponent, DatePickerComponent],
                      providers: [
                          NgbDateNativeAdapter,
                          { provide: ngBootstrap.NgbDateParserFormatter, useClass: NgbDateNativeParserFormatter }
                      ],
                      exports: [DateRangePickerComponent, DatePickerComponent]
                  },] }
      ];
      return DateRangePickerModule;
  }());

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
   */

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
   */

  exports.DateRangePickerModule = DateRangePickerModule;
  exports.DateRangePickerComponent = DateRangePickerComponent;
  exports.DateRange = DateRange;
  exports.NgbDateNativeAdapter = NgbDateNativeAdapter;
  exports.DatePickerComponent = DatePickerComponent;
  exports.ɵa = NgbDateNativeParserFormatter;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=uiowa-date-range-picker.umd.js.map