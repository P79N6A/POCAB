import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Injectable, Component, Input, Output, EventEmitter, ElementRef, ViewChild, NgModule } from '@angular/core';
import { NgbDate, NgbDateParserFormatter, NgbModule } from '@ng-bootstrap/ng-bootstrap';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * DateRange Type represents start date and end date.
 */
class DateRange {
    /**
     * Examples:
     * ```typescript
     * const d1 = new DateRange();
     * const d2 = new DateRange(new Date(), new Date(2018, 9, 10));
     * ```
     * @param {?=} start [Optional] Start Date. Default: null.
     * @param {?=} end [Optional] End Date. Default: null
     */
    constructor(start = null, end = null) {
        this.start = start;
        this.end = end;
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextDays(7);
     * // a date range of next week since today
     * ```
     * @param {?} n Number of days after today.
     * @return {?}
     */
    static nextDays(n) {
        /** @type {?} */
        const start = new Date();
        /** @type {?} */
        const end = new Date();
        end.setDate(end.getDate() + n);
        return new DateRange(start, end);
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextTwoWeeks();
     * // a date range of next two weeks since today
     * ```
     * @return {?}
     */
    static nextTwoWeeks() {
        return DateRange.nextDays(14);
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.nextMonth();
     * // a date range of next month since today
     * ```
     * @return {?}
     */
    static nextMonth() {
        /** @type {?} */
        const start = new Date();
        /** @type {?} */
        const end = new Date();
        end.setMonth(end.getMonth() + 1);
        return new DateRange(start, end);
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.lastMonth();
     * // a date range of last month till today
     * ```
     * @return {?}
     */
    static lastMonth() {
        /** @type {?} */
        const start = new Date();
        /** @type {?} */
        const end = new Date();
        start.setMonth(start.getMonth() - 1);
        return new DateRange(start, end);
    }
    /**
     * Examples:
     * ```typescript
     * const d1 = DateRange.create({});
     * ```
     * @param {?} start start date of range you're creating
     * @param {?} end end date of range you're creating
     * @return {?}
     */
    static create(start, end) {
        /** @type {?} */
        let startDate = null;
        /** @type {?} */
        let endDate = null;
        if (DateRange.isValidDate(start)) {
            startDate = new Date(start);
        }
        if (DateRange.isValidDate(end)) {
            endDate = new Date(end);
        }
        return new DateRange(startDate, endDate);
    }
    /**
     * Examples:
     * ```typescript
     * const isValid = DateRange.isValidDate(new Date());
     * ```
     * @param {?} value date you want to verify as date
     * @return {?}
     */
    static isValidDate(value) {
        if (!value) {
            return false;
        }
        switch (typeof value) {
            case 'number':
                return true;
            case 'string':
                return !isNaN(Date.parse(value));
            case 'object':
                if (value instanceof Date) {
                    return !isNaN(value.getTime());
                }
                break;
            default:
                return false;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Native Date adapter for Ngb DatePicker
 */
class NgbDateNativeAdapter {
    /**
     * @param {?} date
     * @return {?}
     */
    fromModel(date) {
        return date instanceof Date
            ? new NgbDate(date.getFullYear(), date.getMonth() + 1, date.getDate())
            : null;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    toModel(date) {
        return date && date.year && date.month
            ? new Date(date.year, date.month - 1, date.day, 12)
            : null;
    }
}
NgbDateNativeAdapter.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangePickerComponent {
    /**
     * @param {?} dateAdapter
     */
    constructor(dateAdapter) {
        this.dateAdapter = dateAdapter;
        this.disabled = false;
        this.dateRangeChange = new EventEmitter();
        this.isInside = date => date.after(this.fromDate) && date.before(this.toDate);
        this.isFrom = date => date.equals(this.fromDate);
        this.isTo = date => date.equals(this.toDate);
        this.isDisabled = date => date.after(this.max) || date.before(this.min);
        this.isInFuture = date => date.after(this.toDate);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.fromDate = this.dateAdapter.fromModel(this.dateRange.start);
        this.toDate = this.dateAdapter.fromModel(this.dateRange.end);
        this.min = this.minDate ? this.dateAdapter.fromModel(this.minDate) : null;
        this.max = this.maxDate ? this.dateAdapter.fromModel(this.maxDate) : null;
        this.inputElRef.nativeElement.value = this.formatInputText();
        if (this.fromDate) {
            this.dp.startDate = {
                year: this.fromDate.year,
                month: this.fromDate.month
            };
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.dateRange || changes.disabled) {
            this.ngOnInit();
        }
    }
    /**
     * @param {?} date
     * @param {?} dp
     * @return {?}
     */
    onDateChange(date, dp) {
        if (!this.fromDate && !this.toDate) {
            this.fromDate = date;
            this.dateRange.start = this.dateAdapter.toModel(this.fromDate);
        }
        else if (this.fromDate && !this.toDate && date.after(this.fromDate)) {
            this.toDate = date;
            this.dateRange.end = this.dateAdapter.toModel(this.toDate);
            dp.close();
        }
        else {
            this.toDate = null;
            this.fromDate = date;
            this.dateRange.start = this.dateAdapter.toModel(this.fromDate);
            this.dateRange.end = null;
        }
        this.inputElRef.nativeElement.value = this.formatInputText();
        this.dateRangeChange.emit(this.dateRange);
    }
    /**
     * @private
     * @return {?}
     */
    formatInputText() {
        if (this.dateRange.start &&
            this.dateRange.end &&
            DateRange.isValidDate(this.dateRange.start) &&
            DateRange.isValidDate(this.dateRange.end)) {
            return `${this.dateRange.start.toLocaleDateString()} - ${this.dateRange.end.toLocaleDateString()}`;
        }
        return '';
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isHovered(date) {
        return (this.fromDate &&
            !this.toDate &&
            this.hoveredDate &&
            date.after(this.fromDate) &&
            date.before(this.hoveredDate));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isWeekend(date) {
        /** @type {?} */
        const d = new Date(date.year, date.month - 1, date.day);
        return d.getDay() === 0 || d.getDay() === 6;
    }
}
DateRangePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'date-range-picker',
                template: "<div class=\"input-group\">\r\n  <input ngbDatepicker #dp=\"ngbDatepicker\" type=\"text\" class=\"form-control\" style=\"max-width:200px;\" readonly\r\n    [disabled]=\"disabled\" [autoClose]=\"false\" [displayMonths]=\"2\" [dayTemplate]=\"t\" [showWeekNumbers]=\"false\"\r\n    [markDisabled]=\"isDisabled\" [firstDayOfWeek]=\"7\" (click)=\"dp.toggle()\" (dateSelect)=\"onDateChange($event, dp)\">\r\n  <div class=\"input-group-append\">\r\n    <button class=\"btn btn-outline-secondary d-flex align-items-center\" (click)=\"dp.toggle()\" type=\"button\">\r\n      <svg aria-hidden=\"true\" role=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\r\n        <path fill=\"currentColor\" d=\"M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z\"></path>\r\n      </svg>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #t let-date=\"date\" let-focused=\"focused\" let-disabled=\"disabled\">\r\n  <span class=\"custom-day\" [class.focused]=\"focused\" [class.range]=\"isFrom(date) || isTo(date) || isInside(date) || isHovered(date)\"\r\n    [class.faded]=\"isHovered(date) || isInside(date)\" [class.weekend]=\"isWeekend(date)\" [class.disabled]=\"disabled\"\r\n    (mouseenter)=\"hoveredDate = date\" (mouseleave)=\"hoveredDate = null\">\r\n    {{ date.day }}\r\n  </span>\r\n</ng-template>\r\n",
                styles: [".custom-day{text-align:center;padding:.185rem .25rem;display:inline-block;height:2rem;width:2rem}.custom-day.focused{background-color:#e6e6e6}.custom-day.range,.custom-day:hover{background-color:#0275d8;color:#fff}.custom-day.faded{background-color:rgba(2,117,216,.5)}.custom-day.weekend{color:#ff6e6e}.custom-day.disabled{color:#c8cdd2}svg{width:1rem;height:1rem}"]
            }] }
];
/** @nocollapse */
DateRangePickerComponent.ctorParameters = () => [
    { type: NgbDateNativeAdapter }
];
DateRangePickerComponent.propDecorators = {
    dateRange: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    disabled: [{ type: Input }],
    dateRangeChange: [{ type: Output }],
    inputElRef: [{ type: ViewChild, args: ['dp', { read: ElementRef },] }],
    dp: [{ type: ViewChild, args: ['dp',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatePickerComponent {
    /**
     * @param {?} dateAdapter
     */
    constructor(dateAdapter) {
        this.dateAdapter = dateAdapter;
        this.disabled = false;
        this.dateChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngbDate = this.dateAdapter.fromModel(this.date);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.date || changes.disabled) {
            this.ngOnInit();
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    onDateChange(date) {
        this.dateChange.emit(this.dateAdapter.toModel(date));
    }
}
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'date-picker',
                template: "<div class=\"input-group\">\r\n  <input ngbDatepicker #d=\"ngbDatepicker\" class=\"form-control\" name=\"dp\" [(ngModel)]=\"ngbDate\" (click)=\"d.toggle()\"\r\n    [disabled]=\"disabled\" readonly (dateSelect)=\"onDateChange($event)\" style=\"max-width:200px;\">\r\n  <div class=\"input-group-append\">\r\n    <button class=\"btn btn-outline-secondary d-flex align-items-center\" (click)=\"d.toggle()\" type=\"button\">\r\n      <svg aria-hidden=\"true\" role=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\r\n        <path fill=\"currentColor\" d=\"M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z\"></path>\r\n      </svg>\r\n    </button>\r\n  </div>\r\n</div>\r\n",
                styles: ["svg{width:1rem;height:1rem}"]
            }] }
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [
    { type: NgbDateNativeAdapter }
];
DatePickerComponent.propDecorators = {
    date: [{ type: Input }],
    disabled: [{ type: Input }],
    dateChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function padNumber(value) {
    if (isNumber(value)) {
        return `0${value}`.slice(-2);
    }
    else {
        return '';
    }
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumber(value) {
    return !isNaN(toInteger(value));
}
/**
 * @param {?} value
 * @return {?}
 */
function toInteger(value) {
    return parseInt(`${value}`, 10);
}
class NgbDateNativeParserFormatter extends NgbDateParserFormatter {
    /**
     * @param {?} value
     * @return {?}
     */
    parse(value) {
        if (value) {
            /** @type {?} */
            const dateParts = value.trim().split('/');
            if (dateParts.length === 1 && isNumber(dateParts[0])) {
                return { year: toInteger(dateParts[0]), month: null, day: null };
            }
            else if (dateParts.length === 2 &&
                isNumber(dateParts[0]) &&
                isNumber(dateParts[1])) {
                return {
                    year: toInteger(dateParts[1]),
                    month: toInteger(dateParts[0]),
                    day: null
                };
            }
            else if (dateParts.length === 3 &&
                isNumber(dateParts[0]) &&
                isNumber(dateParts[1]) &&
                isNumber(dateParts[2])) {
                return {
                    year: toInteger(dateParts[2]),
                    month: toInteger(dateParts[1]),
                    day: toInteger(dateParts[0])
                };
            }
        }
        return null;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    format(date) {
        /** @type {?} */
        let stringDate = '';
        if (date) {
            stringDate += isNumber(date.month) ? padNumber(date.month) + '/' : '';
            stringDate += isNumber(date.day) ? padNumber(date.day) + '/' : '';
            stringDate += date.year;
        }
        return stringDate;
    }
}
NgbDateNativeParserFormatter.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangePickerModule {
}
DateRangePickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, NgbModule],
                declarations: [DateRangePickerComponent, DatePickerComponent],
                providers: [
                    NgbDateNativeAdapter,
                    { provide: NgbDateParserFormatter, useClass: NgbDateNativeParserFormatter }
                ],
                exports: [DateRangePickerComponent, DatePickerComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DateRangePickerModule, DateRangePickerComponent, DateRange, NgbDateNativeAdapter, DatePickerComponent, NgbDateNativeParserFormatter as ɵa };

//# sourceMappingURL=uiowa-date-range-picker.js.map